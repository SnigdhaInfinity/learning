"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var router_1 = require("@angular/router");
var breadcrumb_component_1 = require("./breadcrumb.component");
var router_stub_1 = require("./router-stub");
var platform_browser_1 = require("@angular/platform-browser");
var breadcrumb_service_1 = require("./breadcrumb.service");
describe("breadcrumbComponent", function () {
    var router;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            providers: [
                { provide: breadcrumb_service_1.BreadcrumbService, useValue: {} },
                { provide: router_1.Router, useClass: router_stub_1.RouterStub },
                { provide: router_1.ActivatedRoute, useClass: router_stub_1.ActivatedRouteStub }
            ],
            declarations: [
                RoutingComponent,
                router_stub_1.RouterLinkStubDirective,
                router_stub_1.RouterOutletStubComponent,
                breadcrumb_component_1.BreadcrumbComponent,
                DcnBreadcrumbPopupStub
            ]
        });
    }));
    describe('when navigation has ended', function () {
        var fixture;
        var links;
        var linkParam;
        var inputBreadcrumbs;
        var visibleBreadcrumbs;
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(RoutingComponent);
                router = testing_1.TestBed.get(router_1.Router);
                var breadcrumbService = testing_1.TestBed.get(breadcrumb_service_1.BreadcrumbService);
                linkParam = { id: 8 };
                inputBreadcrumbs = [
                    buildBreadcrumbs("url1", undefined),
                    buildBreadcrumbs("url1", true),
                    buildBreadcrumbs("url3", false),
                    buildBreadcrumbs("url4", undefined, linkParam),
                ];
                visibleBreadcrumbs = inputBreadcrumbs.filter(function (bc) { return !bc.breadcrumb.hide; });
                breadcrumbService.getBreadcrumbs = jasmine.createSpy("getBreadcrumbs").and.returnValue(inputBreadcrumbs);
                router.testEvents = new router_1.NavigationEnd(1, "url", "urlAfter");
                fixture.autoDetectChanges();
                var linkDes = fixture.debugElement.queryAll(platform_browser_1.By.directive(router_stub_1.RouterLinkStubDirective));
                //get the attached link directive instances using the DebugElement injectors
                links = linkDes
                    .map(function (de) { return de.injector.get(router_stub_1.RouterLinkStubDirective); });
            });
        }));
        it('should have 4 links', function () {
            expect(links.length).toBe(4, 'should have 4 links');
        });
        it('should have home as the first link', testing_1.async(function () {
            expect(links[0].linkParams[0]).toBe('', 'should link to Home');
        }));
        it('should bind to routerLink', function () {
            var pos = 0;
            links.map(function (link) {
                if (pos != 0) {
                    expect(link.linkParams[0]).toBe(visibleBreadcrumbs[pos - 1].url, 'should bind to url');
                    //currently I removed params from the routelink
                    //expect(link.linkParams[1]).toBe(visibleBreadcrumbs[pos - 1].params, 'should bind to link param');
                }
                pos++;
            });
        });
        it('should have icon for Home link', function () {
            var pos = 0;
            var aElement = fixture.debugElement.queryAll(function (el) { return el.name === "a"; })[0];
            expect(aElement.nativeElement.innerHTML.indexOf("fa fa-home home-icon")).toBeGreaterThan(-1);
        });
        it('should have text and icon for dynamic links', function () {
            var pos = 0;
            var aElements = fixture.debugElement.queryAll(function (el) { return el.name === "a"; });
            aElements.map(function (link) {
                if (pos != 0) {
                    expect(link.nativeElement.innerHTML.indexOf(visibleBreadcrumbs[pos - 1].breadcrumb.label)).toBeGreaterThan(-1);
                    expect(link.nativeElement.innerHTML.indexOf(visibleBreadcrumbs[pos - 1].breadcrumb.icon)).toBeGreaterThan(-1);
                }
                pos++;
            });
        });
        it('should have breadcrumbDropDown popup and bind to breadcrumbDropDown', function () {
            var breadcrumbPopups = fixture.debugElement.queryAll(platform_browser_1.By.directive(DcnBreadcrumbPopupStub));
            expect(breadcrumbPopups.length).toBe(4);
            var pos = 0;
            breadcrumbPopups
                .map(function (cmp) {
                if (pos > 0) {
                    var popup = cmp.componentInstance;
                    expect(popup.breadcrumbDropDown).toBe(visibleBreadcrumbs[pos - 1].breadcrumb.dropDown);
                }
                pos++;
            });
        });
    });
    function buildBreadcrumbs(url, visible, params) {
        if (params === void 0) { params = undefined; }
        return {
            breadcrumb: {
                label: url + "_label",
                icon: url + "_icon",
                dropDown: { popupTitle: "aaa" },
                hide: visible,
            },
            params: params,
            url: url
        };
    }
});
//region test components
var RoutingComponent = (function () {
    function RoutingComponent() {
    }
    return RoutingComponent;
}());
RoutingComponent = __decorate([
    core_1.Component({
        template: "\n    <dcn-breadcrumb></dcn-breadcrumb>\n    <router-outlet></router-outlet>\n  "
    })
], RoutingComponent);
var DcnBreadcrumbPopupStub = (function () {
    function DcnBreadcrumbPopupStub() {
    }
    return DcnBreadcrumbPopupStub;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DcnBreadcrumbPopupStub.prototype, "breadcrumbDropDown", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DcnBreadcrumbPopupStub.prototype, "isLast", void 0);
DcnBreadcrumbPopupStub = __decorate([
    core_1.Component({
        selector: 'dcn-breadcrumb-popup',
        template: ''
    })
], DcnBreadcrumbPopupStub);
//endregion
