{"version":3,"sources":["ngx-smart-modal.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","ngxSmartModal","core","animations","common","this","NgxSmartModalService","modalStack","prototype","addModal","modalInstance","force","i","findIndex","o","id","modal","push","getModal","filter","getModalStack","getOpenedModals","modals","forEach","visible","getHigherIndex","index","layerPosition","Math","max","apply","getModalStackCount","length","removeModal","splice","setModalData","data","find","setData","getModalData","getData","resetModalData","removed","removeData","closeLatestModal","me","clearTimeout","debouncer","setTimeout","tmp","m","close","decorators","type","Injectable","ctorParameters","NgxSmartModalComponent","ngxSmartModalService","changeDetectorRef","closable","escapeAble","customClass","backdrop","visibleChange","EventEmitter","onClose","onCloseFinished","onDismiss","onDismissFinished","onOpen","onEscape","onDataAdded","onDataRemoved","overlayVisible","ngOnInit","identifier","ngOnDestroy","open","top","document","body","classList","contains","add","emit","remove","markForCheck","dismiss","e","target","addCustomClass","className","removeCustomClass","replace","trim","isVisible","hasData","_this","escapeKeyboardEvent","event","keyCode","Component","args","trigger","transition","style","transform","animate","selector","template","ChangeDetectorRef","propDecorators","Input","Output","HostListener","NgxSmartModalModule","forRoot","ngModule","providers","forChild","NgModule","declarations","imports","CommonModule","Object","defineProperty","value"],"mappings":"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","file":"ngx-smart-modal.umd.min.js.map","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/animations', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.ngxSmartModal = {}),global.ng.core,global.ng.animations,global.ng.common));\n}(this, (function (exports,core,animations,common) { 'use strict';\n\n/**\n * @license ngx-smart-modal\n * MIT license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalService = (function () {\n    function NgxSmartModalService() {\n        this.modalStack = [];\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} Returns nothing special.\n     */\n    NgxSmartModalService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} Returns nothing special.\n     */\n    function (modalInstance, force) {\n        if (force) {\n            var /** @type {?} */ i = this.modalStack.findIndex(function (o) {\n                return o.id === modalInstance.id;\n            });\n            if (i > -1) {\n                this.modalStack[i].modal = modalInstance.modal;\n            }\n            else {\n                this.modalStack.push(modalInstance);\n            }\n            return;\n        }\n        this.modalStack.push(modalInstance);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this.modalStack.filter(function (o) {\n            return o.id === id;\n        })[0].modal;\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} Returns an array that contains all modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} Returns an array that contains all modal instances.\n     */\n    function () {\n        return this.modalStack;\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} Returns an array that contains all the opened modals.\n     */\n    NgxSmartModalService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} Returns an array that contains all the opened modals.\n     */\n    function () {\n        var /** @type {?} */ modals = [];\n        this.modalStack.forEach(function (o) {\n            if (o.modal.visible) {\n                modals.push(o);\n            }\n        });\n        return modals;\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} Returns a higher index from all the existing modal instances.\n     */\n    NgxSmartModalService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} Returns a higher index from all the existing modal instances.\n     */\n    function () {\n        var /** @type {?} */ index = [];\n        var /** @type {?} */ modals = this.getOpenedModals();\n        modals.forEach(function (o) {\n            index.push(o.modal.layerPosition);\n        });\n        return Math.max.apply(Math, index) + 1;\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} Returns the number of modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} Returns the number of modal instances.\n     */\n    function () {\n        return this.modalStack.length;\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} Returns the removed modal instance.\n     */\n    NgxSmartModalService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} Returns the removed modal instance.\n     */\n    function (id) {\n        var /** @type {?} */ i = this.modalStack.findIndex(function (o) {\n            return o.id === id;\n        });\n        if (i > -1) {\n            this.modalStack.splice(i, 1);\n        }\n    };\n    /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} Returns true if the given modal exists and the process has been tried, either false.\n     */\n    NgxSmartModalService.prototype.setModalData = /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} Returns true if the given modal exists and the process has been tried, either false.\n     */\n    function (data, id, force) {\n        if (!!this.modalStack.find(function (o) {\n            return o.id === id;\n        })) {\n            this.getModal(id).setData(data, force);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} Returns the associated modal data.\n     */\n    NgxSmartModalService.prototype.getModalData = /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} Returns the associated modal data.\n     */\n    function (id) {\n        return this.getModal(id).getData();\n    };\n    /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} Returns the removed data or false if modal doesn't exist.\n     */\n    NgxSmartModalService.prototype.resetModalData = /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} Returns the removed data or false if modal doesn't exist.\n     */\n    function (id) {\n        if (!!this.modalStack.find(function (o) {\n            return o.id === id;\n        })) {\n            var /** @type {?} */ removed = this.getModal(id).getData();\n            this.getModal(id).removeData();\n            return removed;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Close the latest opened modal if it has been declared as escapeAble\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeLatestModal = /**\n     * Close the latest opened modal if it has been declared as escapeAble\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ me = this;\n        clearTimeout(this.debouncer);\n        this.debouncer = setTimeout(function () {\n            var /** @type {?} */ tmp;\n            me.getOpenedModals().forEach(function (m) {\n                if (m.modal.layerPosition > (!!tmp ? tmp.modal.layerPosition : 0 && m.modal.escapeAble)) {\n                    tmp = m;\n                }\n            });\n            return !!tmp ? tmp.modal.close() : false;\n        }, 100);\n    };\n    NgxSmartModalService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalService.ctorParameters = function () { return []; };\n    return NgxSmartModalService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalComponent = (function () {\n    function NgxSmartModalComponent(ngxSmartModalService, changeDetectorRef) {\n        this.ngxSmartModalService = ngxSmartModalService;\n        this.changeDetectorRef = changeDetectorRef;\n        this.closable = true;\n        this.escapeAble = true;\n        this.customClass = '';\n        this.visible = false;\n        this.backdrop = true;\n        this.force = true;\n        this.visibleChange = new core.EventEmitter();\n        this.onClose = new core.EventEmitter();\n        this.onCloseFinished = new core.EventEmitter();\n        this.onDismiss = new core.EventEmitter();\n        this.onDismissFinished = new core.EventEmitter();\n        this.onOpen = new core.EventEmitter();\n        this.onEscape = new core.EventEmitter();\n        this.onDataAdded = new core.EventEmitter();\n        this.onDataRemoved = new core.EventEmitter();\n        this.layerPosition = 1041;\n        this.overlayVisible = false;\n        this.data = null;\n    }\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.layerPosition += this.ngxSmartModalService.getModalStackCount();\n        this.ngxSmartModalService.addModal({ id: this.identifier, modal: this }, this.force);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.ngxSmartModalService.removeModal(this.identifier);\n    };\n    /**\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.open = /**\n     * @param {?=} top\n     * @return {?}\n     */\n    function (top) {\n        if (top) {\n            this.layerPosition = this.ngxSmartModalService.getHigherIndex();\n        }\n        if (!document.body.classList.contains('dialog-open')) {\n            document.body.classList.add('dialog-open');\n        }\n        this.overlayVisible = true;\n        this.visible = true;\n        this.onOpen.emit(this);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.close = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ me = this;\n        this.visible = false;\n        this.visibleChange.emit(this.visible);\n        this.onClose.emit(this);\n        if (document.body.classList.contains('dialog-open')) {\n            document.body.classList.remove('dialog-open');\n        }\n        setTimeout(function () {\n            me.overlayVisible = false;\n            me.changeDetectorRef.markForCheck();\n            me.onCloseFinished.emit(me);\n        }, 150);\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.dismiss = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        var /** @type {?} */ me = this;\n        if (e.target.classList.contains('overlay')) {\n            this.visible = false;\n            this.visibleChange.emit(this.visible);\n            this.onDismiss.emit(this);\n            if (document.body.classList.contains('dialog-open')) {\n                document.body.classList.remove('dialog-open');\n            }\n            setTimeout(function () {\n                me.overlayVisible = false;\n                me.changeDetectorRef.markForCheck();\n                me.onDismissFinished.emit(me);\n            }, 150);\n        }\n    };\n    /**\n     * @param {?} className\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.addCustomClass = /**\n     * @param {?} className\n     * @return {?}\n     */\n    function (className) {\n        if (!this.customClass.length) {\n            this.customClass = className;\n        }\n        else {\n            this.customClass += ' ' + className;\n        }\n    };\n    /**\n     * @param {?=} className\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.removeCustomClass = /**\n     * @param {?=} className\n     * @return {?}\n     */\n    function (className) {\n        if (className) {\n            this.customClass = this.customClass.replace(className, '').trim();\n        }\n        else {\n            this.customClass = '';\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.isVisible = /**\n     * @return {?}\n     */\n    function () {\n        return this.visible;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.hasData = /**\n     * @return {?}\n     */\n    function () {\n        return !!this.data;\n    };\n    /**\n     * @param {?} data\n     * @param {?=} force\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.setData = /**\n     * @param {?} data\n     * @param {?=} force\n     * @return {?}\n     */\n    function (data, force) {\n        var _this = this;\n        if (!this.data || (!!this.data && force)) {\n            setTimeout(function () {\n                _this.data = data;\n                _this.onDataAdded.emit(_this.data);\n            }, 0);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.getData = /**\n     * @return {?}\n     */\n    function () {\n        return this.data;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.removeData = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.data = null;\n            _this.onDataRemoved.emit(true);\n        }, 0);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.escapeKeyboardEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.escapeAble) {\n            var /** @type {?} */ x = event.keyCode;\n            if (x === 27) {\n                this.onEscape.emit(this);\n                this.ngxSmartModalService.closeLatestModal();\n            }\n        }\n    };\n    NgxSmartModalComponent.decorators = [\n        { type: core.Component, args: [{\n                    animations: [\n                        animations.trigger('dialog', [\n                            animations.transition('void => *', [\n                                animations.style({ transform: 'scale3d(.3, .3, .3)' }),\n                                animations.animate(100)\n                            ]),\n                            animations.transition('* => void', [\n                                animations.animate(100, animations.style({ transform: 'scale3d(.0, .0, .0)' }))\n                            ])\n                        ])\n                    ],\n                    selector: 'ngx-smart-modal',\n                    template: \"\\n    <style>\\n      .overlay {\\n        position: fixed;\\n        top: 0;\\n        bottom: 0;\\n        left: 0;\\n        right: 0;\\n        overflow-y: auto;\\n        background-color: rgba(0, 0, 0, 0.5);\\n        z-index: 999;\\n      }\\n\\n      .overlay.transparent {\\n        background-color: transparent;\\n      }\\n\\n      body.dialog-open {\\n        overflow: hidden;\\n      }\\n\\n      .dialog {\\n        visibility: visible;\\n        position: absolute;\\n        border-radius: 2px;\\n        right: 0;\\n        left: 0;\\n        top: 20px;\\n        margin-bottom: 20px;\\n        margin-right: auto;\\n        margin-left: auto;\\n        min-height: 200px;\\n        width: 90%;\\n        max-width: 520px;\\n        background-color: #fff;\\n        padding: 12px;\\n        box-shadow: 0 7px 8px -4px rgba(0, 0, 0, 0.2), 0 13px 19px 2px rgba(0, 0, 0, 0.14), 0 5px 24px 4px rgba(0, 0, 0, 0.12);\\n      }\\n\\n      @media (min-width: 768px) {\\n        .dialog {\\n          top: 40px;\\n          margin-bottom: 40px;\\n        }\\n      }\\n\\n      .dialog__close-btn {\\n        border: 0;\\n        background: none;\\n        color: #2d2d2d;\\n        position: absolute;\\n        top: 8px;\\n        right: 8px;\\n        font-size: 1.2em;\\n      }\\n\\n      .dialog__close-btn:hover {\\n        cursor: pointer;\\n      }\\n    </style>\\n    <div *ngIf=\\\"overlayVisible\\\" class=\\\"overlay\\\" [style.z-index]=\\\"layerPosition-1\\\"\\n         [ngClass]=\\\"{'transparent':!backdrop}\\\"\\n         (click)=\\\"dismiss($event)\\\">\\n      <div [@dialog] *ngIf=\\\"visible\\\" [style.z-index]=\\\"layerPosition\\\" class=\\\"dialog\\\" [ngClass]=\\\"customClass\\\">\\n        <ng-content></ng-content>\\n        <button *ngIf=\\\"closable\\\" (click)=\\\"close()\\\" aria-label=\\\"Close\\\" class=\\\"dialog__close-btn\\\">\\n          <img\\n            src=\\\"data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCA1MTIgNTEyIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MTIgNTEyOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgd2lkdGg9IjE2cHgiIGhlaWdodD0iMTZweCI+CjxnPgoJPGc+CgkJPHBhdGggZD0iTTUwNS45NDMsNi4wNThjLTguMDc3LTguMDc3LTIxLjE3Mi04LjA3Ny0yOS4yNDksMEw2LjA1OCw0NzYuNjkzYy04LjA3Nyw4LjA3Ny04LjA3NywyMS4xNzIsMCwyOS4yNDkgICAgQzEwLjA5Niw1MDkuOTgyLDE1LjM5LDUxMiwyMC42ODMsNTEyYzUuMjkzLDAsMTAuNTg2LTIuMDE5LDE0LjYyNS02LjA1OUw1MDUuOTQzLDM1LjMwNiAgICBDNTE0LjAxOSwyNy4yMyw1MTQuMDE5LDE0LjEzNSw1MDUuOTQzLDYuMDU4eiIgZmlsbD0iIzAwMDAwMCIvPgoJPC9nPgo8L2c+CjxnPgoJPGc+CgkJPHBhdGggZD0iTTUwNS45NDIsNDc2LjY5NEwzNS4zMDYsNi4wNTljLTguMDc2LTguMDc3LTIxLjE3Mi04LjA3Ny0yOS4yNDgsMGMtOC4wNzcsOC4wNzYtOC4wNzcsMjEuMTcxLDAsMjkuMjQ4bDQ3MC42MzYsNDcwLjYzNiAgICBjNC4wMzgsNC4wMzksOS4zMzIsNi4wNTgsMTQuNjI1LDYuMDU4YzUuMjkzLDAsMTAuNTg3LTIuMDE5LDE0LjYyNC02LjA1N0M1MTQuMDE4LDQ5Ny44NjYsNTE0LjAxOCw0ODQuNzcxLDUwNS45NDIsNDc2LjY5NHoiIGZpbGw9IiMwMDAwMDAiLz4KCTwvZz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8L3N2Zz4K\\\" />\\n        </button>\\n      </div>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalComponent.ctorParameters = function () { return [\n        { type: NgxSmartModalService, },\n        { type: core.ChangeDetectorRef, },\n    ]; };\n    NgxSmartModalComponent.propDecorators = {\n        \"closable\": [{ type: core.Input },],\n        \"escapeAble\": [{ type: core.Input },],\n        \"identifier\": [{ type: core.Input },],\n        \"customClass\": [{ type: core.Input },],\n        \"visible\": [{ type: core.Input },],\n        \"backdrop\": [{ type: core.Input },],\n        \"force\": [{ type: core.Input },],\n        \"visibleChange\": [{ type: core.Output },],\n        \"onClose\": [{ type: core.Output },],\n        \"onCloseFinished\": [{ type: core.Output },],\n        \"onDismiss\": [{ type: core.Output },],\n        \"onDismissFinished\": [{ type: core.Output },],\n        \"onOpen\": [{ type: core.Output },],\n        \"onEscape\": [{ type: core.Output },],\n        \"onDataAdded\": [{ type: core.Output },],\n        \"onDataRemoved\": [{ type: core.Output },],\n        \"escapeKeyboardEvent\": [{ type: core.HostListener, args: ['document:keydown', ['$event'],] },],\n    };\n    return NgxSmartModalComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalModule = (function () {\n    function NgxSmartModalModule() {\n    }\n    /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forRoot = /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [NgxSmartModalService]\n        };\n    };\n    /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forChild = /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [NgxSmartModalService]\n        };\n    };\n    NgxSmartModalModule.decorators = [\n        { type: core.NgModule, args: [{\n                    declarations: [NgxSmartModalComponent],\n                    exports: [NgxSmartModalComponent],\n                    imports: [common.CommonModule]\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalModule.ctorParameters = function () { return []; };\n    return NgxSmartModalModule;\n}());\n\nexports.NgxSmartModalService = NgxSmartModalService;\nexports.NgxSmartModalComponent = NgxSmartModalComponent;\nexports.NgxSmartModalModule = NgxSmartModalModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ngx-smart-modal.umd.js.map\n"]}