import { Component, OnInit,Input,ViewChild,ElementRef } from '@angular/core';
import { NsoService } from '../nso.service';
import { Router } from '@angular/router';
import { Http, Headers } from '@angular/http';
import { Subject } from 'rxjs/Subject';
import { ModalpopupComponent } from '../modalpopup/modalpopup.component';
import { DomSanitizer } from '@angular/platform-browser';
 import { DialogService } from "ng2-bootstrap-modal";
 import {NgxSmartModalService} from 'ngx-smart-modal';
 import { AuthService } from '../auth.service';

import { ServiceTerminationComponent } from '../service-termination/service-termination.component';

@Component({
  selector: 'app-service-termination-tab',
  templateUrl: './service-termination-tab.component.html',
  styleUrls: ['./service-termination-tab.component.scss']
})
export class ServiceTerminationTabComponent implements OnInit {

  @Input() bTabData;
	uList;
	dtOptions: DataTables.Settings = {};
	dtTrigger: Subject<any> = new Subject();
	hList;
	message:String;
	title1;
	messagehtml;
	uList1;
	dtOptions1: DataTables.Settings = {};
	dtTrigger1: Subject<any> = new Subject();
	hList1;
	list2=[];
	check;
	type="link";
	@ViewChild('dataContainer') d1:ElementRef;

	
	constructor(private sanitized: DomSanitizer,private router: Router, private nsoService: NsoService, private http: Http,private dialogService:DialogService,
		private elementRef:ElementRef,private ngxSmartModalService:NgxSmartModalService, private authService: AuthService)  {
		
   }
   ngAfterViewInit() {
  
}
getValus(val,val2){
	let path=val;
	/* this.nsoService.nsoServicesCheckSync(path).subscribe(data => {
		  if (data.result) {
			  this.uList = data.result.results;
		  } else {
			 
		  }
	  });*/
	  return "a";
}

showError(errorV){
alert(errorV);
}
  ngOnInit() {

  		
	  let list = ['ckt-id', 'bandwidth','Update_bandwidth'];
	  if (this.bTabData.indexOf("link")!=-1){
		  list = ['vpn-id', 'mesh-rd-value'];
	  } 

	  this.hList = list;
	  
	  const User = {
		  'serviceName': this.bTabData,
		  "selection": list
	  }
	  let _that = this.bTabData;
	  this.nsoService.nsoData(User).subscribe(data => {
		  var _amit = data.result.results.map((x,y,z)=> {
		  	console.log('___________________');
		  	console.log(x);
		  	let _index = x[0];
		  	let path=_that+"{"+_index+"}";
		  	const User1 = {
		  'URL': path,
		  'action':'check-sync'
	 		}
		  	let disable = this.nsoService.nsoServicesCheckSync(User1).subscribe(datas => {
		  		console.log("------------------"+path);
		  		console.log(datas);
		  		console.log("------------------");
		  		if(datas.error){
		  			//if(datas.error){
		  				console.log(typeof datas.error.data.reason);
		  			//return datas.error.data.reason;
		  			x.push({'error':datas.error.data.reason});
		  		}
		  		if(datas.result){
		  			x.push({'result':datas.result[0].value});
		  			//x.push(datas.result[0].value);
		  		}
		  	});
		  	//x.push(disable)
 
		  	console.log('___________________');
		  });
console.log(data.result.results);
		  if (data.result) {
			  this.uList = data.result.results
		  } else {
			  this.router.navigate(['']);
		  }
	  });
  	//////////////////
	  let headers = new Headers();
	  headers.append('content-type', 'application/json');
	  this.dtOptions = {
		  pagingType: 'full_numbers',
		  pageLength: 10
	  };
	  this.http.post('api/data', User, { headers: headers })
		  .map(<any>this.extractData)
		  .subscribe(data => {
			  //this.uList = data;
			  // Calling the DT trigger to manually render the table
			  this.dtTrigger.next();
		  }); 
		
  }

	private extractData(res: Response) {
		const body = res.json();
		return body || {};
	}
	private extractData1(res: Response) {
		const body = res.json();
 
		return body || {};
	}
	slideTable(_path,_Val){
 
	} 
	
	 showConfirm(vpnName,serviceName,action){
	 	alert(vpnName);
	 	alert(serviceName);
	 	alert(action);
	 	let path=serviceName+"{"+vpnName+"}";
	 	const User1 = {
		  'URL': path,
		  'action':action
	 		}
		  	this.nsoService.nsoServicesCheckSync(User1).subscribe(datad => {
		  		console.log("------------------"+path+" ---]==="+action);
		  		console.log(datad);
		  		console.log("------------------");
		  		/*if(datas.error){
		  			//if(datas.error){
		  				console.log(typeof datas.error.data.reason);
		  			//return datas.error.data.reason;
		  			x.push({'error':datas.error.data.reason});
		  		}
		  		if(datas.result){
		  			x.push({'result':datas.result[0].value});
		  			//x.push(datas.result[0].value);
		  		}*/
		  	});
	 }
     showLink(vpnId,path){
        	let dataAll={};
        	 let objs=new ServiceTerminationComponent(this.router,this.nsoService,this.http,this.dialogService,this.ngxSmartModalService,this.authService);
   				
        	objs.list2 = ['ckt-id', 'admin-state', 'customer-address', 'qos/bandwidth','Update_Bandwidth'];
        	this.hList1=this.list2;
        	const json={
        		context:path.replace("/link",""),
        		xpath:"link[starts-with(vpn-id,'"+vpnId+"')]",
        		selection:objs.list2
        	}
        	this.check=vpnId;
        	this.nsoService.nsoDataquery(json).subscribe(data => {
		  if (data.result) {
			  objs.uList1 = data.result.results;
			  dataAll={
			  	'hList1':objs.list2,
			  	'uList1':objs.uList1,
			  	'bTabData':path,
			  	'vpnId':vpnId
			  }
			   objs.ngxSmartModalService.getModal('l3VPNSTModal').onOpen.subscribe((event: Event) => {
     			//event['data']=dataAll;
     			if(event['data']!=null){
     				event['data']=dataAll;
     			}else{
     				objs.ngxSmartModalService.setModalData(dataAll, 'l3VPNSTModal');
     			}
   				 });
			  	
	       		objs.ngxSmartModalService.getModal('l3VPNSTModal').open();
			  
		  } else {
		  	 dataAll={
			  	'hList1':objs.list2,
			  	'uList1':{},
			  	'bTabData':path,
			  	'vpnId':vpnId
			  }
		  	objs.ngxSmartModalService.getModal('l3VPNSTModal').onOpen.subscribe((event: Event) => {
     			
     			if(event['data']!=null){
     				event['data']=dataAll;
     			}else{
     				objs.ngxSmartModalService.setModalData(dataAll, 'l3VPNSTModal');
     			}
   				 });
			  	//objs.ngxSmartModalService.setModalData(dataAll, 'l3VPNModal');
	       		objs.ngxSmartModalService.getModal('l3VPNSTModal').open();
		  }
	  	});
       objs.ngxSmartModalService.getModal('l3VPNSTModal').onClose.subscribe((event: Event) => {
     			event['data'].uList1=[];
     			dataAll={};
    });
        let headers = new Headers();
				  headers.append('content-type', 'application/json');
				  this.dtOptions1 = {
					  pagingType: 'full_numbers',
					  pageLength: 10
				  };
				  this.http.post('api/data/query', json, { headers: headers })
					  .map(<any>this.extractData1)
					  .subscribe(data => {
						  //this.uList = data;
						  // Calling the DT trigger to manually render the table
						  this.dtTrigger1.next();
					  }); 
        }
    }

        
        

