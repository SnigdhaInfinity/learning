"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/of");
require("rxjs/add/operator/mergeMap");
var router_1 = require("@angular/router");
var BreadcrumbPopupComponent = (function () {
    function BreadcrumbPopupComponent(elementRef, router) {
        this.elementRef = elementRef;
        this.router = router;
        this.itemSelectedByKeyboard = false;
        this._showPopup = false;
        this.search = this.search.bind(this);
    }
    Object.defineProperty(BreadcrumbPopupComponent.prototype, "showPopup", {
        get: function () {
            return this._showPopup;
        },
        set: function (isShow) {
            this._showPopup = isShow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreadcrumbPopupComponent.prototype, "isShowNextArrow", {
        get: function () {
            return this.isShowBreadcrumbDropDown || !this.isLast;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreadcrumbPopupComponent.prototype, "isShowBreadcrumbDropDown", {
        get: function () {
            return this.breadcrumbDropDown &&
                (this.breadcrumbDropDown.getItems != undefined ||
                    this.breadcrumbDropDown.items instanceof Observable_1.Observable ||
                    this.breadcrumbDropDown.items && this.breadcrumbDropDown.items.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    BreadcrumbPopupComponent.prototype.onKeyEscape = function (event) {
        this.hidePopup();
    };
    BreadcrumbPopupComponent.prototype.onClick = function (event) {
        if (!this.elementRef.nativeElement.contains(event.target)) {
            this.hidePopup();
        }
    };
    BreadcrumbPopupComponent.prototype.hidePopup = function () {
        this.showPopup = false;
    };
    BreadcrumbPopupComponent.prototype.search = function (query) {
        var search = query.toUpperCase();
        var result = this.allItems.filter(function (item) { return item.label.toLocaleUpperCase().indexOf(search) > -1; });
        return Observable_1.Observable.of(result);
    };
    BreadcrumbPopupComponent.prototype.setInitialFilter = function (event) {
        var _this = this;
        this.resetSelection();
        var items = this.items;
        if (items instanceof Observable_1.Observable) {
            var subscription_1 = items.subscribe(function (vals) {
                _this.allItems = vals;
                _this.filteredItems = vals;
                _this.showPopup = !_this.showPopup;
                if (subscription_1) {
                    subscription_1.unsubscribe();
                }
            });
        }
        else {
            this.allItems = items;
            this.filteredItems = items;
            this.showPopup = !this.showPopup;
        }
    };
    Object.defineProperty(BreadcrumbPopupComponent.prototype, "items", {
        get: function () {
            if (this.breadcrumbDropDown.getItems) {
                return this.breadcrumbDropDown.getItems();
            }
            else {
                return this.breadcrumbDropDown.items;
            }
        },
        enumerable: true,
        configurable: true
    });
    BreadcrumbPopupComponent.prototype.onFiltered = function (filteredBreadcrumbDropDownData) {
        var _this = this;
        if (!(filteredBreadcrumbDropDownData && filteredBreadcrumbDropDownData.find(function (f) { return f == _this.selectedItem; }))) {
            this.resetSelection();
        }
        else if (filteredBreadcrumbDropDownData) {
            this.selectedItemIndex = filteredBreadcrumbDropDownData.findIndex(function (f) { return f == _this.selectedItem; });
        }
        this.filteredItems = filteredBreadcrumbDropDownData;
    };
    BreadcrumbPopupComponent.prototype.resetSelection = function () {
        this.selectedItemIndex = -1;
    };
    BreadcrumbPopupComponent.prototype.selectElementDown = function (event) {
        if (this.selectedItemIndex != this.filteredItems.length - 1) {
            this.selectedItemIndex++;
            this.itemSelectedByKeyboard = true;
        }
        event.preventDefault();
    };
    BreadcrumbPopupComponent.prototype.selectElementUp = function (event) {
        if (this.selectedItemIndex != 0) {
            this.selectedItemIndex--;
            this.itemSelectedByKeyboard = true;
        }
        event.preventDefault();
    };
    BreadcrumbPopupComponent.prototype.navigate = function () {
        if (this.selectedItemIndex >= 0 && this.selectedItemIndex <= this.filteredItems.length && !this.filteredItems[this.selectedItemIndex].disabled) {
            this.router.navigateByUrl(this.filteredItems[this.selectedItemIndex].url);
        }
    };
    Object.defineProperty(BreadcrumbPopupComponent.prototype, "selectedItem", {
        get: function () {
            return this.filteredItems ? this.filteredItems[this.selectedItemIndex] : undefined;
        },
        enumerable: true,
        configurable: true
    });
    BreadcrumbPopupComponent.prototype.ngAfterViewChecked = function () {
        if (this.itemSelectedByKeyboard) {
            this.scrollIntoView();
            this.itemSelectedByKeyboard = false;
        }
    };
    BreadcrumbPopupComponent.prototype.scrollIntoView = function () {
        if (this.myScrollContainer && this.myScrollContainer.nativeElement) {
            var selectedElement = this.myScrollContainer.nativeElement.querySelector('.is-selected');
            if (selectedElement) {
                this.scrollInView(this.myScrollContainer.nativeElement, selectedElement);
            }
        }
    };
    BreadcrumbPopupComponent.prototype.scrollInView = function (container, item) {
        var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
        var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
        var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        var containerRect = container.getBoundingClientRect();
        var itemRect = item.getBoundingClientRect();
        var offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        var scroll = container.scrollTop;
        var elementHeight = container.clientHeight;
        var itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
            container.scrollTop = scroll + offset;
        }
        else if ((offset + itemHeight) > elementHeight) {
            container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
    };
    BreadcrumbPopupComponent.prototype.getOuterHeight = function (el, margin) {
        var height = el.offsetHeight;
        if (margin) {
            var style = getComputedStyle(el);
            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
    };
    return BreadcrumbPopupComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], BreadcrumbPopupComponent.prototype, "breadcrumbDropDown", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], BreadcrumbPopupComponent.prototype, "isLast", void 0);
__decorate([
    core_1.HostListener('keydown.escape', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], BreadcrumbPopupComponent.prototype, "onKeyEscape", null);
__decorate([
    core_1.HostListener('document:click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], BreadcrumbPopupComponent.prototype, "onClick", null);
__decorate([
    core_1.ViewChild('scrollMe'),
    __metadata("design:type", core_1.ElementRef)
], BreadcrumbPopupComponent.prototype, "myScrollContainer", void 0);
BreadcrumbPopupComponent = __decorate([
    core_1.Component({
        moduleId: "" + module.id,
        selector: 'dcn-breadcrumb-popup',
        styleUrls: ["breadcrumb.component.css"],
        template: "\n<div class=\"popover\" >\n  <button *ngIf=\"isShowNextArrow\"  #btn3 [ngClass]=\"{'menu-button':true, 'has-no-popup':!isShowBreadcrumbDropDown,'has-popup':isShowBreadcrumbDropDown,'is-active':showPopup}\" (click)=\"setInitialFilter($event)\">\n    <i class=\"fa fa-angle-right menu-button-icon\"></i>\n  </button>\n  <div *ngIf=\"showPopup\" class=\"breadcrumbPopup\">\n  <div class=\"arrowUp\"></div>\n      <h4 *ngIf=\"breadcrumbDropDown.popupTitle\">{{breadcrumbDropDown.popupTitle}}</h4>\n      <dcn-search-box class=\"breadcrumb-popup-search\"\n                      #searchbox\n                      [searchData]=\"search\"\n                      (keydown.arrowDown)=\"selectElementDown($event)\"\n                      (keydown.arrowUp)=\"selectElementUp($event)\"\n                      (keydown.enter)=\"navigate()\"\n                      [minLength]=\"0\"\n                      (results)=\"onFiltered($event)\">\n      </dcn-search-box>\n      \n      <div class=\"breadcrumb-popup-menu\" #scrollMe >\n          <div *ngFor=\"let nextLink of filteredItems; let inx=index;\"  class=\"breadcrumb-popup-menu-item\">\n\n              <a *ngIf=\"nextLink.disabled\"\n                 (mouseenter)=\"selectedItemIndex=inx\"\n                 [ngClass]=\"{'breadcrumb-popup-link':true, 'is-disabled':nextLink.disabled, 'is-selected':inx==selectedItemIndex}\" >\n              <i class=\"{{nextLink.icon}} icon breadcrumb-popup-link-icon\" ></i>\n              <span class=\"breadcrumb-popup-link-text\" >{{nextLink.label}}</span></a>\n\n\n              <a *ngIf=\"!nextLink.disabled\" \n                 [routerLink]=\"[nextLink.url, nextLink.params?nextLink.params:{}]\" \n                 (mouseenter)=\"selectedItemIndex=inx\"\n                 (click)=\"hidePopup()\"\n                 [ngClass]=\"{'breadcrumb-popup-link':true, 'is-selected':inx==selectedItemIndex}\" >\n              <i class=\"{{nextLink.icon}} icon breadcrumb-popup-link-icon\" ></i>\n              <span class=\"breadcrumb-popup-link-text\" >{{nextLink.label}}</span></a>\n          </div>\n      </div>\n  </div>\n</div>\n\n"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, router_1.Router])
], BreadcrumbPopupComponent);
exports.BreadcrumbPopupComponent = BreadcrumbPopupComponent;
