"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var core_1 = require("@angular/core");
var platform_browser_1 = require("@angular/platform-browser");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/of");
var common_1 = require("@angular/common");
var searchbox_component_1 = require("./searchbox.component");
describe("BreadcrumbRoute Popup Component", function () {
    var fixture;
    var testCmp;
    var input;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                common_1.CommonModule
            ],
            providers: [],
            declarations: [
                TestComponent, searchbox_component_1.SearchBoxComponent
            ]
        });
    }));
    describe('when all search box inputs are supplied', function () {
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.compileComponents().then(function () {
                createComponent();
                input = fixture.debugElement.query(platform_browser_1.By.css("input")).nativeElement;
            });
        }));
        it('should call on loading true/search/on loading false and result', testing_1.fakeAsync(function () {
            testCmp.searchDataMocked = [{ a: 1, b: 2 }];
            sendKeyUp("e");
            fixture.detectChanges();
            testCalledParameter(ON_LOADING, true);
            testCalledParameter(ON_SEARCH_DATA, "e");
            testCalledParameter(ON_LOADING, false);
            testCalledParameter(ON_SEARCH_RESULT, testCmp.searchDataMocked);
            expect(testCmp.calledMethodAndParam.length).toBe(0);
        }));
        it('should NOT call on search result in case of an error', testing_1.fakeAsync(function () {
            testCmp.searchDataMocked = [{ a: 1, b: 2 }];
            sendKeyUp(ON_ERROR_STRING);
            fixture.detectChanges();
            testCalledParameter(ON_LOADING, true);
            testCalledParameter(ON_SEARCH_DATA, ON_ERROR_STRING);
            testCalledParameter(ON_LOADING, false);
            expect(testCmp.calledMethodAndParam.length).toBe(0);
        }));
        it('should have focus in the input field', function () {
            var element = fixture.nativeElement.querySelector("input");
            expect(document.activeElement).toBe(element);
        });
    });
    describe('when there is no input for search data function', function () {
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.overrideComponent(TestComponent, {
                set: {
                    template: "<dcn-search-box *ngIf=\"keepMeAlive\"\n                [maxResults]=\"3\" [minLength]=\"0\" (results)=\"onSearchResult($event)\" (loading)=\"onLoading($event)\"\n                    > </dcn-search-box>"
                }
            });
            testing_1.TestBed.compileComponents().then(function () {
                createComponent();
                input = fixture.debugElement.query(platform_browser_1.By.css("input")).nativeElement;
            });
        }));
        it('should support search box without supplying searchData function', testing_1.fakeAsync(function () {
            testCmp.searchDataMocked = [{ a: 1, b: 2 }];
            sendKeyUp("e");
            fixture.autoDetectChanges();
            fixture.whenStable().then(function () {
                testCalledParameter(ON_LOADING, true);
                //no call for search data since it has its owen function
                testCalledParameter(ON_LOADING, false);
                testCalledParameter(ON_SEARCH_RESULT, []);
                expect(testCmp.calledMethodAndParam.length).toBe(0);
            });
        }));
    });
    function sendKeyUp(inputValue) {
        input.value = inputValue;
        input.dispatchEvent(new Event('keyup'));
        fixture.detectChanges();
        simulateKeyUpevent(input, inputValue);
        testing_1.tick(500);
    }
    function testCalledParameter(method, parameter) {
        expect(testCmp.calledMethodAndParam[0].method).toBe(method);
        expect(testCmp.calledMethodAndParam[0].parameter).toEqual(parameter);
        testCmp.calledMethodAndParam.splice(0, 1);
    }
    function simulateKeyUpevent(element, keyCode) {
        var eventObj = document.createEvent("Events");
        if (eventObj.initEvent) {
            eventObj.initEvent("keyup", true, true);
        }
        eventObj.keyCode = keyCode;
        eventObj.which = keyCode;
        element.dispatchEvent ? element.dispatchEvent(eventObj) : element.fireEvent("keyup", eventObj);
    }
    function createComponent() {
        fixture = testing_1.TestBed.createComponent(TestComponent);
        fixture.detectChanges();
        testCmp = fixture.debugElement.componentInstance;
        testCmp.clearTrace();
    }
});
var ON_LOADING = "onloading";
var ON_SEARCH_DATA = "onDearchData";
var ON_SEARCH_RESULT = "onDearchResult";
var ON_ERROR_STRING = "ON_ERROR_STRING";
//region test components
var TestComponent = (function () {
    function TestComponent() {
        this.calledMethodAndParam = [];
        this.keepMeAlive = true;
        this.keepMeAlive = true;
        this.calledMethodAndParam = [];
        this.searchService = this.searchService.bind(this);
    }
    TestComponent.prototype.searchService = function (query, maxResult) {
        this.calledMethodAndParam.push(new TraceData(ON_SEARCH_DATA, query));
        if (query == ON_ERROR_STRING) {
            throw "something went wrong";
        }
        return Observable_1.Observable.of(this.searchDataMocked);
    };
    TestComponent.prototype.onSearchResult = function (filteredData) {
        this.calledMethodAndParam.push({ method: ON_SEARCH_RESULT, parameter: filteredData });
        this.searchResult = filteredData;
    };
    TestComponent.prototype.onLoading = function (val) {
        this.calledMethodAndParam.push(new TraceData(ON_LOADING, val));
        this.loading = val;
    };
    TestComponent.prototype.clearTrace = function () {
        this.calledMethodAndParam = [];
    };
    return TestComponent;
}());
TestComponent = __decorate([
    core_1.Component({
        template: "\n\n      <dcn-search-box *ngIf=\"keepMeAlive\"\n         [searchData]=\"searchService\"\n         [maxResults]=\"3\"\n         [minLength]=\"0\"\n         (results)=\"onSearchResult($event)\"\n         (loading)=\"onLoading($event)\"\n      >\n      </dcn-search-box>\n  "
    }),
    __metadata("design:paramtypes", [])
], TestComponent);
var TraceData = (function () {
    function TraceData(method, parameter) {
        this.method = method;
        this.parameter = parameter;
    }
    return TraceData;
}());
//endregion
