export class Jsonview {
	private _htmlView:string = "";
	private _FirsthtmlView:string = "";
	private jsonElements=[];
	constructor(private nsoService,private _data,private _meta,private _keyPath){

	}
	firstAcordian(){
		let path="";
		let parentData=this._data;
		let elements={};
		path=this._keyPath;
		elements['name']=parentData.name;
		if(parentData.kind=="list-entry" || parentData.kind=="container"){
			elements['type']="div";
		}
		//this.jsonElements.push(elements);
		elements['children'] = [];
		//console.log(parentData.children);
		if(parentData.children!=null){
		for(let i=0;i<parentData.children.length;i++){
			let innData=parentData.children[i];
			////console.log(innData.name);
			if(innData.name!="modified" && innData.name!="directly-modified" && innData.name!="commit-queue" && innData.name!="log"){
			let childelements={};
			childelements['name']=innData.name;
			if(innData.kind=="key"){

				childelements['type']="text";
				childelements['readonly']="readonly";
				this.getValue(path,innData.qname,childelements);
			}
			if(innData.kind=="leaf"){
				this.callJsonLeaf(path,innData,this._meta,childelements);
				//childelements['type']="text";
			}
			if(innData.kind=="container"){
				
				this.callJsonContainer(path,innData,this._meta,childelements);
				//childelements['type']="text";
			
			}
			if(innData.kind=="choice"){
					this.callJsonChoice((path),innData,this._meta,childelements);
				}
			childelements['tooltip']=innData.info;
			if(innData.mandatory){
				childelements['mandatory']="required";
			}
			else{
				childelements['mandatory']="";
			}
			if(innData.type){
				if(innData.type.name!=null && innData.type.namespace!=null){
					this.callMetaData(innData.type.namespace,innData.type.name,childelements);
				}
			}
			if(innData.kind=="action"){
				childelements['type']="button";
				//childelements['type']="text";
			}
			elements['children'].push(childelements);
			}
		}
	}
		this.jsonElements.push(elements);
		return this.jsonElements;
	}
	callMetaData(namespace,name,elements){
		let metaTypes=namespace+":"+name;
		//console.log(this._meta.types[metaTypes]);
		let metaTypesList=this._meta.types[metaTypes];
		if(metaTypesList.length>1){
			for(let i=0;i<metaTypesList.length;i++){
				if(metaTypesList[i].pattern!=null){
					elements['pattern']=metaTypesList[i].pattern.value;
				}
			}
		}
	}

	callJsonLeaf(path,json,meta,childelements){
		////console.log("leaf");
		////console.log(meta.keypath);
		let metadt=json.type.namespace+":"+json.type.name;
		let mtdt=meta.types[metadt];
		////console.log(metadt);
		//console.log(mtdt);
		let option=[];
		childelements['name']=json.name;
		childelements['qname']=json.qname;
		childelements['tooltip']=json.info;
		childelements['path']=path;
		this.getValue(path,json.qname,childelements);
		if(json.default!=null){
			childelements['defaultValue']=json.default;
		}
		if(json.mandatory!=null){
			childelements['mandatory']="required";
		}
		if(typeof mtdt!="undefined" && mtdt!=null){
			//console.log("asdsdsdadsasdas");
			var flags=1;
			 for(var m=0;m<mtdt.length;m++)
			 {
			 	if(mtdt[m].enumeration!=null){
			 		 flags=0;
			 		 var enumList=mtdt[m].enumeration;
			 		 option=[];
			 		 for(var mj=0;mj<enumList.length;mj++){
						option.push(enumList[mj].label);
			 		 }
			 		 if(json.evaluated_when_entry==null || json.evaluated_when_entry==true){
			 		 			childelements['type']="select";
			 		 			childelements['option']=option;
			 		 		}	
			 	}
			 }
			 if(flags==0){}
			 	else{
			 		if(json.is_leafref!=null){
			 			if(json.is_leafref){
			 				 if(json.evaluated_when_entry==null || json.evaluated_when_entry==true){
			 		 			childelements['type']="select";
			 		 		}	
			 			}
			 			else{
			 				if(json.type.primitive!=null){
			 					if(json.type.primitive){
			 						if(json.type.name=="empty"){
			 						childelements['type']="checkbox";
			 						this.checkExists(path,json.qname,childelements);
				 						if(json.default!=null){
				 							childelements['default']=json.default;
				 						}
			 						
			 						}else{
			 							//console.log(json.type.name);
			 							//console.log(json.type.primitive);
			 							childelements['type']="text";
			 						}
			 		 				
			 					}
			 						else{
			 							childelements['type']="text";
			 						}
			 				}
			 			}
			 		}else{
			 			childelements['type']="text";
			 		}
			 	}
		}
		else{
			if(json.is_leafref!=null){
			 			if(json.is_leafref){
			 				 if(json.evaluated_when_entry==null || json.evaluated_when_entry==true){
			 		 			childelements['type']="select";
			 		 		}
			 			}
			 			else{
			 				if(json.type.primitive!=null){
			 					if(json.type.primitive){
			 						//console.log(json.type.name);
			 							//console.log(json.type.primitive);
			 						if(json.type.name=="empty"){
			 						childelements['type']="checkbox";
			 							this.checkExists(path,json.qname,childelements);
				 						if(json.default!=null){
				 							childelements['default']=json.default;
				 						}
			 						
			 						}else if(json.type.name=="boolean"){
			 						childelements['type']="select";
			 						let option=[];
			 						option.push("true");
			 						option.push("false");
			 						childelements['option']=option;
				 						if(json.default!=null){
				 							childelements['default']=json.default;
				 						}
			 						
			 						}else{
			 							childelements['type']="text";
			 						}
			 		 				
			 					}
			 						
			 				}else{
			 							childelements['type']="text";
			 						}
			 			}
			 		}else{
			 			if(json.type.name=="empty"){
			 						childelements['type']="checkbox";
			 							this.checkExists(path,json.qname,childelements);
				 						if(json.default!=null){
				 							childelements['default']=json.default;
				 						}
			 						
			 						}
			 			else if(json.type.name=="boolean"){
			 						childelements['type']="select";
			 						let option=[];
			 						option.push("true");
			 						option.push("false");
			 						childelements['option']=option;
				 						if(json.default!=null){
				 							childelements['default']=json.default;
				 						}
			 						
			 						}else{
			 							childelements['type']="text";
			 						}
			 			}
		}
	}

	callJsonChoice(path,json,meta,childelements){
		let option=[];
		//if(json.evaluated_when_entry!=null || json.evaluated_when_entry==true){
			childelements['name']=json.name;
			childelements['qname']=json.qname;
			childelements['tooltip']=json.info;
			childelements['type']="choice";
			childelements['path']=path;
			console.log("choice++++++++++"+path);
			this.getCase(path,json.name,childelements);
			if(json.default!=null){
				childelements['defaultValue']=json.default;
			}
			if(json.mandatory!=null){
				childelements['mandatory']="required";
			}
			if(json.config!=null && json.config==false){
				childelements['readonly']="readonly";
			}
			let choiceCases=json.cases;
			let choiceChildren=[];
			for(let m=0;m<choiceCases.length;m++){
				let indchild=choiceCases[m].children;
				let caseInVal="";
				let subchild={};
				let subchild1=[];
				
				subchild['name']=choiceCases[m].name;
				for(let h=0;h<indchild.length;h++){
					let subcasechild={};
					if(indchild[h].mandatory!=null){
							subcasechild['mandatory']="required";
						}
						if(indchild[h].kind=="key"){

						subcasechild['type']="text";
						subcasechild['readonly']="readonly";
						
						}
					if(indchild[h].kind=="container"){
					this.callJsonContainer((path),indchild[h],meta,subcasechild);
					}
					if(indchild[h].kind=="list"){
					this.callJsonList((path),indchild[h],meta,subcasechild);
					}
					if(indchild[h].kind=="leaf-list"){
					this.callJsonLeafList((path),indchild[h],meta,subcasechild);
					}
					if(indchild[h].kind=="leaf"){
					this.callJsonLeaf((path),indchild[h],meta,subcasechild);
					}
					if(indchild[h].kind=="choice"){
						this.callJsonChoice((path),indchild[h],meta,subcasechild);
					}
					if(indchild[h].type){
						if(indchild[h].type.name!=null && indchild[h].type.namespace!=null){
							this.callMetaData(indchild[h].type.namespace,indchild[h].type.name,subcasechild);
						}
					}
					//console.log(subcasechild);
					subchild1.push(subcasechild)
				}
				subchild['caseChildren']=subchild1;
				//option.push(subchild);
				option.push(subchild);
			}
			childelements['option']=option;
			//console.log("childelements-------------choice");
			//console.log(childelements);
			//console.log("childelements------------choice End");
		//}
	}
	callJsonContainer(path,json,_meta,childelements){
		childelements['name']=json.name;
		childelements['qname']=json.qname;
		childelements['path']=path;
		childelements['type']="div";
		if(json.presence!=null){
			childelements['presence']=true;
			childelements['tooltip']=json.info;
		}
		let subchildelements=[];
		
		
		if(json.children!=null){
			for(let t=0;t<json.children.length;t++){
				let subchild={};
				let child=json.children[t];
				if(child.kind=="key"){

				subchild['type']="text";
				subchild['readonly']="readonly";
				
				}
				if(child.kind=="leaf"){
					this.callJsonLeaf((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="choice"){
					this.callJsonChoice((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="list"){
					this.callJsonList((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="leaf-list"){
					this.callJsonLeafList((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="container"){
					this.callJsonContainer((path+"/"+json.name),child,_meta,subchild);

				}
				if(child.type){
					if(child.type.name!=null && child.type.namespace!=null){
						this.callMetaData(child.type.namespace,child.type.name,subchild);
					}
				}
				subchildelements.push(subchild);
			}
				childelements['children']=subchildelements;
		}

	}
	callJsonList(path,json,_meta,childelements){
		childelements['name']=json.name;
		childelements['qname']=json.qname;
		childelements['path']=path;
		childelements['type']="table";
		if(json.presence!=null){
			childelements['presence']=true;
			childelements['tooltip']=json.info;
		}
		let subchildelements=[];
		
		let list = [];
		if(json.children!=null){
			for(let t=0;t<json.children.length;t++){
				let subchild={};
				let child=json.children[t];
				list.push(child.name);
				if(child.kind=="key"){
				subchild['name']=json.name;
				subchild['qname']=json.qname;
				subchild['tooltip']=json.info;
				subchild['path']=path+"/"+json.name;	
				subchild['type']="text";
				subchild['readonly']="readonly";
				
				}
				if(child.kind=="leaf"){
					this.callJsonLeaf((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="choice"){
					this.callJsonChoice((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="container"){
					this.callJsonContainer((path+"/"+json.name),child,_meta,subchild);

				}
				if(child.type){
					if(child.type.name!=null && child.type.namespace!=null){
						this.callMetaData(child.type.namespace,child.type.name,subchild);
					}
				}
				subchildelements.push(subchild);
			}
				childelements['children']=subchildelements;
		}
		this.getListData(path,json.name,list,childelements);
	}
	callJsonLeafList(path,json,_meta,childelements){
		childelements['name']=json.name;
		childelements['qname']=json.qname;
		childelements['path']=path;
		childelements['type']="multiselect";
		if(json.mandatory){
			childelements['mandatory']=true;
		}
		this.getValue(path,json.qname,childelements);
		let subchildelements=[];
		
		let list = [];
		if(json.children!=null){
			for(let t=0;t<json.children.length;t++){
				let subchild={};
				let child=json.children[t];
				list.push(child.name);
				if(child.kind=="key"){
				subchild['name']=json.name;
				subchild['qname']=json.qname;
				subchild['tooltip']=json.info;
				subchild['path']=path+"/"+json.name;	
				subchild['type']="text";
				subchild['readonly']="readonly";
				
				}
				if(child.kind=="leaf"){
					this.callJsonLeaf((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="choice"){
					this.callJsonChoice((path+"/"+json.name),child,_meta,subchild);
				}
				if(child.kind=="container"){
					this.callJsonContainer((path+"/"+json.name),child,_meta,subchild);

				}
				if(child.type){
					if(child.type.name!=null && child.type.namespace!=null){
						this.callMetaData(child.type.namespace,child.type.name,subchild);
					}
				}
				subchildelements.push(subchild);
			}
				childelements['children']=subchildelements;
		}
		//this.getListData(path,json.name,list,childelements);
	}
	getValue(path,qname,childelements){
		const URL = {
		  'URL': (path+"/"+qname)

	  }
		 this.nsoService.nsoServicesSchemaGetValue(URL).subscribe(data => {
		 /* console.log("value=============="+path+"/"+qname);
		  console.log(data);*/
		  	if(data.result!=null){

		  		childelements['value']=data.result.value;
		  	}
			});  
	}
	
	getCase(path,name,childelements){
		const URL = {
		  'URL': (path),
		  'choice':name
	  }
		 this.nsoService.nsoServicesSchemaGetCase(URL).subscribe(data => {
		  console.log("case=============="+path+"/"+name);
		  console.log(data);
		  	if(data.result!=null){

		  		childelements['value']=data.result.case;
		  	}
			});  
	}
	checkExists(path,qname,childelements){
		const URL = {
		  'URL': (path+"/"+qname)
	  }
		 this.nsoService.nsoServicesSchemaExists(URL).subscribe(data => {
		  console.log("checkExists=============="+path+"/"+qname);
		  console.log(data);
		  	if(data.result!=null){
		  		childelements['checked']=data.result.exists;
		  	}
			});  
	}
	getListData(path,name,list,childelements){

		const URL = {
		  'context': path,
		  'xpath':name,
		  'selection':list
	  }
		 this.nsoService.nsoDataquery(URL).subscribe(data => {
		  console.log("list data=============="+path+"/"+name);
		  console.log(data);
		  	if(data.result!=null){

		  		childelements['value']=data.result.results;
		  	}
			});  
	}
}
