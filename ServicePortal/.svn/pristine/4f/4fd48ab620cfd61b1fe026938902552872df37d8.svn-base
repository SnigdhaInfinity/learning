import { ElementRef } from "@angular/core";
import { Observable } from "rxjs/Observable";
import "rxjs/add/observable/of";
import "rxjs/add/operator/mergeMap";
import { BreadcrumbDropDown, BreadcrumbDropDownItem } from "./breadcrumb-model";
import { Router } from "@angular/router";
export declare class BreadcrumbPopupComponent {
    private elementRef;
    private router;
    breadcrumbDropDown: BreadcrumbDropDown;
    allItems: BreadcrumbDropDownItem[];
    filteredItems: BreadcrumbDropDownItem[];
    selectedItemIndex: number;
    private itemSelectedByKeyboard;
    isLast: boolean;
    _showPopup: boolean;
    showPopup: boolean;
    constructor(elementRef: ElementRef, router: Router);
    readonly isShowNextArrow: boolean;
    readonly isShowBreadcrumbDropDown: boolean;
    onKeyEscape(event: KeyboardEvent): void;
    onClick(event: MouseEvent): void;
    hidePopup(): void;
    search(query: string): Observable<any[]>;
    setInitialFilter(event: MouseEvent): void;
    readonly items: BreadcrumbDropDownItem[] | Observable<BreadcrumbDropDownItem[]>;
    onFiltered(filteredBreadcrumbDropDownData: BreadcrumbDropDownItem[]): void;
    private resetSelection();
    selectElementDown(event: KeyboardEvent): void;
    selectElementUp(event: KeyboardEvent): void;
    navigate(): void;
    private readonly selectedItem;
    ngAfterViewChecked(): void;
    private scrollIntoView();
    private lineHeight;
    private myScrollContainer;
    private scrollInView(container, item);
    private getOuterHeight(el, margin?);
}
